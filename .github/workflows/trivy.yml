name: CI/CD Trivy Flow

on:
  push:
    branches:
      - master

permissions:
  contents: read
  security-events: write
  pull-requests: read
  actions: write

jobs:
  Trivy-fs:
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - name: Use Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 10.24.1
        - name: Checkout argocd-logo
          uses: actions/checkout@v4
          with:
            repository: thirapat12/argocd-logo
            ref: main
            path: argocd-logo
        - name: Checkout argocd-logo
          uses: actions/checkout@v4
          with:
            repository: thirapat12/cv-profile
            ref: master
            path: cv-profile
        - name: Install dependencies
          run: |
            ls -la
            npm install
        - name: Run Trivy vulnerability scanner fs dependency into package-lock.json
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: 'fs'
            scan-ref: '.'
            ignore-unfixed: true
            format: template
            template: '@/contrib/html.tpl'
            output: 'report-vuln-repositories.html'
            # format: 'table'
            # output: 'report-dependencies.json'
            severity: 'CRITICAL,HIGH,MEDIUM'

        - name: upload result vuln into package-lock.json to zip
          uses: actions/upload-artifact@v2
          with:
            name: report-vuln-repositories
            path: 'report-vuln-repositories.html'    

        - name: Run Trivy vulnerability scanner in repo mode
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: 'fs'
            # scan-ref: 'package-lock.json'
            ignore-unfixed: true
            format: 'sarif'
            output: 'trivy-results.sarif'
            # template: '@/contrib/sarif.tpl'
            # output: 'trivy-results.sarif'
            # format: template
            # template: '@/contrib/html.tpl'
            # output: 'report-dependencies.html'
            # format: 'table'
            # output: 'report-dependencies.json'
            severity: 'CRITICAL,HIGH,MEDIUM'

        - name: Upload Trivy scan results to GitHub Security tab 
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: 'trivy-results.sarif'

  Trivy-image-scan:
    needs: [Trivy-fs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # echo commitid sourcecode
      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        with:
          length: 7
      - run: echo $SHA
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
      - run: echo $SHA
        env:
          SHA: ${{ env.SHA }}
      - name: Kaniko build
        uses: aevea/action-kaniko@master
        with:
          image: thirapat12/thirapat12
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          tag: ${{ github.ref_name }}-${{ env.SHA }}
          build_file: ./Dockerfile
          cache: true
          cache_registry: thirapat12/thirapat12

      - name: Login to Docker Hub Private Repository
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |
          docker pull thirapat12/thirapat12:${{ github.ref_name }}-${{ env.SHA }}
          docker save -o vuln-image.tar thirapat12/thirapat12:${{ github.ref_name }}-${{ env.SHA }}
          echo ${{ env.SHA }} > version.txt
          ls -lrt
          cat version.txt

    #   # Trivy Scanner Image & export report to format template  
    #   - name: Run Trivy vulnerability scanner build image
    #     uses: aquasecurity/trivy-action@master
    #     with:
    #       # image-ref: 'thirapat12/thirapat12:${{ env.SHA }}'
    #       # format: 'table'
    #       input: /github/workspace/vuln-image.tar
    #       format: template
    #       template: '@/contrib/html.tpl'
    #       output: 'report-image-${{ env.SHA }}.html'
    #       exit-code: '0'
    #       ignore-unfixed: true
    #       vuln-type: 'os,library'
    #       severity: 'CRITICAL,HIGH,MEDIUM'

    #   - name: upload result vuln base image
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: report-vuln-image.json
    #       path: 'report-image-${{ env.SHA }}.html'

    #   # Trivy Scanner Image & export report to format template  
    #   - name: Run Trivy vulnerability scanner build image
    #     uses: aquasecurity/trivy-action@master
    #     with:
    #       # image-ref: 'thirapat12/thirapat12:${{ env.SHA }}'
    #       # format: 'table'
    #       input: /github/workspace/vuln-image.tar
    #       format: 'sarif'
    #     #   template: '@/contrib/html.tpl'
    #       output: 'report-image-${{ env.SHA }}.sarif'
    #       exit-code: '0'
    #       ignore-unfixed: true
    #       vuln-type: 'os,library'
    #       severity: 'CRITICAL,HIGH,MEDIUM'
          
    #   - name: Upload Trivy scan results to GitHub Security tab
    #     uses: github/codeql-action/upload-sarif@v2
    #     with:
    #       sarif_file: 'report-image-${{ env.SHA }}.sarif'

      - name: Run Trivy vulnerability scanner to scan your private registry
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'thirapat12/thirapat12:${{ github.ref_name }}-${{ env.SHA }}'
          format: 'sarif'
          output: 'trivy-results-${{ env.SHA }}.sarif'
          ignore-unfixed: true
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ env.SHA }}.sarif'

#   trivy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#         - uses: aquasecurity/trivy-action@master
#           name: Run Trivy vulnerability scanner fs dependency into package-lock.json
#           with:
#             scan-type: 'fs'
#             scan-ref: 'package-lock.json'
#             ignore-unfixed: true
#             format: template
#             template: '@/contrib/html.tpl'
#             output: 'report-dependencies.html'
#             # format: 'table'
#             # output: 'report-dependencies.json'
#             severity: 'CRITICAL,HIGH,MEDIUM'
